/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/identity/accesscontextmanager/v1/service_perimeter.proto

package com.google.identity.accesscontextmanager.v1;

/**
 *
 *
 * <pre>
 * `ServicePerimeter` describes a set of Google Cloud resources which can freely
 * import and export data amongst themselves, but not export outside of the
 * `ServicePerimeter`. If a request with a source within this `ServicePerimeter`
 * has a target outside of the `ServicePerimeter`, the request will be blocked.
 * Otherwise the request is allowed. There are two types of Service Perimeter -
 * Regular and Bridge. Regular Service Perimeters cannot overlap, a single
 * Google Cloud project can only belong to a single regular Service Perimeter.
 * Service Perimeter Bridges can contain only Google Cloud projects as members,
 * a single Google Cloud project may belong to multiple Service Perimeter
 * Bridges.
 * </pre>
 *
 * Protobuf type {@code google.identity.accesscontextmanager.v1.ServicePerimeter}
 */
public final class ServicePerimeter extends com.google.protobuf.GeneratedMessageV3
    implements
    // @@protoc_insertion_point(message_implements:google.identity.accesscontextmanager.v1.ServicePerimeter)
    ServicePerimeterOrBuilder {
  private static final long serialVersionUID = 0L;
  // Use ServicePerimeter.newBuilder() to construct.
  private ServicePerimeter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }

  private ServicePerimeter() {
    name_ = "";
    title_ = "";
    description_ = "";
    perimeterType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(UnusedPrivateParameter unused) {
    return new ServicePerimeter();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet getUnknownFields() {
    return this.unknownFields;
  }

  private ServicePerimeter(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10:
            {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
          case 18:
            {
              java.lang.String s = input.readStringRequireUtf8();

              title_ = s;
              break;
            }
          case 26:
            {
              java.lang.String s = input.readStringRequireUtf8();

              description_ = s;
              break;
            }
          case 34:
            {
              com.google.protobuf.Timestamp.Builder subBuilder = null;
              if (createTime_ != null) {
                subBuilder = createTime_.toBuilder();
              }
              createTime_ =
                  input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(createTime_);
                createTime_ = subBuilder.buildPartial();
              }

              break;
            }
          case 42:
            {
              com.google.protobuf.Timestamp.Builder subBuilder = null;
              if (updateTime_ != null) {
                subBuilder = updateTime_.toBuilder();
              }
              updateTime_ =
                  input.readMessage(com.google.protobuf.Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(updateTime_);
                updateTime_ = subBuilder.buildPartial();
              }

              break;
            }
          case 48:
            {
              int rawValue = input.readEnum();

              perimeterType_ = rawValue;
              break;
            }
          case 58:
            {
              com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder
                  subBuilder = null;
              if (status_ != null) {
                subBuilder = status_.toBuilder();
              }
              status_ =
                  input.readMessage(
                      com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.parser(),
                      extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(status_);
                status_ = subBuilder.buildPartial();
              }

              break;
            }
          case 66:
            {
              com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder
                  subBuilder = null;
              if (spec_ != null) {
                subBuilder = spec_.toBuilder();
              }
              spec_ =
                  input.readMessage(
                      com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.parser(),
                      extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(spec_);
                spec_ = subBuilder.buildPartial();
              }

              break;
            }
          case 72:
            {
              useExplicitDryRunSpec_ = input.readBool();
              break;
            }
          default:
            {
              if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }

  public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
    return com.google.identity.accesscontextmanager.v1.ServicePerimeterProto
        .internal_static_google_identity_accesscontextmanager_v1_ServicePerimeter_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.google.identity.accesscontextmanager.v1.ServicePerimeterProto
        .internal_static_google_identity_accesscontextmanager_v1_ServicePerimeter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.google.identity.accesscontextmanager.v1.ServicePerimeter.class,
            com.google.identity.accesscontextmanager.v1.ServicePerimeter.Builder.class);
  }

  /**
   *
   *
   * <pre>
   * Specifies the type of the Perimeter. There are two types: regular and
   * bridge. Regular Service Perimeter contains resources, access levels, and
   * restricted services. Every resource can be in at most ONE
   * regular Service Perimeter.
   * In addition to being in a regular service perimeter, a resource can also
   * be in zero or more perimeter bridges.  A perimeter bridge only contains
   * resources.  Cross project operations are permitted if all effected
   * resources share some perimeter (whether bridge or regular). Perimeter
   * Bridge does not contain access levels or services: those are governed
   * entirely by the regular perimeter that resource is in.
   * Perimeter Bridges are typically useful when building more complex toplogies
   * with many independent perimeters that need to share some data with a common
   * perimeter, but should not be able to share data among themselves.
   * </pre>
   *
   * Protobuf enum {@code google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType}
   */
  public enum PerimeterType implements com.google.protobuf.ProtocolMessageEnum {
    /**
     *
     *
     * <pre>
     * Regular Perimeter.
     * </pre>
     *
     * <code>PERIMETER_TYPE_REGULAR = 0;</code>
     */
    PERIMETER_TYPE_REGULAR(0),
    /**
     *
     *
     * <pre>
     * Perimeter Bridge.
     * </pre>
     *
     * <code>PERIMETER_TYPE_BRIDGE = 1;</code>
     */
    PERIMETER_TYPE_BRIDGE(1),
    UNRECOGNIZED(-1),
    ;

    /**
     *
     *
     * <pre>
     * Regular Perimeter.
     * </pre>
     *
     * <code>PERIMETER_TYPE_REGULAR = 0;</code>
     */
    public static final int PERIMETER_TYPE_REGULAR_VALUE = 0;
    /**
     *
     *
     * <pre>
     * Perimeter Bridge.
     * </pre>
     *
     * <code>PERIMETER_TYPE_BRIDGE = 1;</code>
     */
    public static final int PERIMETER_TYPE_BRIDGE_VALUE = 1;

    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PerimeterType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PerimeterType forNumber(int value) {
      switch (value) {
        case 0:
          return PERIMETER_TYPE_REGULAR;
        case 1:
          return PERIMETER_TYPE_BRIDGE;
        default:
          return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PerimeterType> internalGetValueMap() {
      return internalValueMap;
    }

    private static final com.google.protobuf.Internal.EnumLiteMap<PerimeterType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<PerimeterType>() {
          public PerimeterType findValueByNumber(int number) {
            return PerimeterType.forNumber(number);
          }
        };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }

    public final com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType() {
      return getDescriptor();
    }

    public static final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor() {
      return com.google.identity.accesscontextmanager.v1.ServicePerimeter.getDescriptor()
          .getEnumTypes()
          .get(0);
    }

    private static final PerimeterType[] VALUES = values();

    public static PerimeterType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException("EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PerimeterType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType)
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   *
   *
   * <pre>
   * Required. Resource name for the ServicePerimeter.  The `short_name`
   * component must begin with a letter and only include alphanumeric and '_'.
   * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The name.
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Required. Resource name for the ServicePerimeter.  The `short_name`
   * component must begin with a letter and only include alphanumeric and '_'.
   * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
   * </pre>
   *
   * <code>string name = 1;</code>
   *
   * @return The bytes for name.
   */
  public com.google.protobuf.ByteString getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TITLE_FIELD_NUMBER = 2;
  private volatile java.lang.Object title_;
  /**
   *
   *
   * <pre>
   * Human readable title. Must be unique within the Policy.
   * </pre>
   *
   * <code>string title = 2;</code>
   *
   * @return The title.
   */
  public java.lang.String getTitle() {
    java.lang.Object ref = title_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      title_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Human readable title. Must be unique within the Policy.
   * </pre>
   *
   * <code>string title = 2;</code>
   *
   * @return The bytes for title.
   */
  public com.google.protobuf.ByteString getTitleBytes() {
    java.lang.Object ref = title_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      title_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 3;
  private volatile java.lang.Object description_;
  /**
   *
   *
   * <pre>
   * Description of the `ServicePerimeter` and its use. Does not affect
   * behavior.
   * </pre>
   *
   * <code>string description = 3;</code>
   *
   * @return The description.
   */
  public java.lang.String getDescription() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      description_ = s;
      return s;
    }
  }
  /**
   *
   *
   * <pre>
   * Description of the `ServicePerimeter` and its use. Does not affect
   * behavior.
   * </pre>
   *
   * <code>string description = 3;</code>
   *
   * @return The bytes for description.
   */
  public com.google.protobuf.ByteString getDescriptionBytes() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
      description_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CREATE_TIME_FIELD_NUMBER = 4;
  private com.google.protobuf.Timestamp createTime_;
  /**
   *
   *
   * <pre>
   * Output only. Time the `ServicePerimeter` was created in UTC.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 4;</code>
   *
   * @return Whether the createTime field is set.
   */
  public boolean hasCreateTime() {
    return createTime_ != null;
  }
  /**
   *
   *
   * <pre>
   * Output only. Time the `ServicePerimeter` was created in UTC.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 4;</code>
   *
   * @return The createTime.
   */
  public com.google.protobuf.Timestamp getCreateTime() {
    return createTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : createTime_;
  }
  /**
   *
   *
   * <pre>
   * Output only. Time the `ServicePerimeter` was created in UTC.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp create_time = 4;</code>
   */
  public com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder() {
    return getCreateTime();
  }

  public static final int UPDATE_TIME_FIELD_NUMBER = 5;
  private com.google.protobuf.Timestamp updateTime_;
  /**
   *
   *
   * <pre>
   * Output only. Time the `ServicePerimeter` was updated in UTC.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 5;</code>
   *
   * @return Whether the updateTime field is set.
   */
  public boolean hasUpdateTime() {
    return updateTime_ != null;
  }
  /**
   *
   *
   * <pre>
   * Output only. Time the `ServicePerimeter` was updated in UTC.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 5;</code>
   *
   * @return The updateTime.
   */
  public com.google.protobuf.Timestamp getUpdateTime() {
    return updateTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : updateTime_;
  }
  /**
   *
   *
   * <pre>
   * Output only. Time the `ServicePerimeter` was updated in UTC.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp update_time = 5;</code>
   */
  public com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder() {
    return getUpdateTime();
  }

  public static final int PERIMETER_TYPE_FIELD_NUMBER = 6;
  private int perimeterType_;
  /**
   *
   *
   * <pre>
   * Perimeter type indicator. A single project is
   * allowed to be a member of single regular perimeter, but multiple service
   * perimeter bridges. A project cannot be a included in a perimeter bridge
   * without being included in regular perimeter. For perimeter bridges,
   * the restricted service list as well as access level lists must be
   * empty.
   * </pre>
   *
   * <code>
   * .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
   * </code>
   *
   * @return The enum numeric value on the wire for perimeterType.
   */
  public int getPerimeterTypeValue() {
    return perimeterType_;
  }
  /**
   *
   *
   * <pre>
   * Perimeter type indicator. A single project is
   * allowed to be a member of single regular perimeter, but multiple service
   * perimeter bridges. A project cannot be a included in a perimeter bridge
   * without being included in regular perimeter. For perimeter bridges,
   * the restricted service list as well as access level lists must be
   * empty.
   * </pre>
   *
   * <code>
   * .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
   * </code>
   *
   * @return The perimeterType.
   */
  public com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType
      getPerimeterType() {
    @SuppressWarnings("deprecation")
    com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType result =
        com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType.valueOf(
            perimeterType_);
    return result == null
        ? com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType.UNRECOGNIZED
        : result;
  }

  public static final int STATUS_FIELD_NUMBER = 7;
  private com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status_;
  /**
   *
   *
   * <pre>
   * Current ServicePerimeter configuration. Specifies sets of resources,
   * restricted services and access levels that determine perimeter
   * content and boundaries.
   * </pre>
   *
   * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
   *
   * @return Whether the status field is set.
   */
  public boolean hasStatus() {
    return status_ != null;
  }
  /**
   *
   *
   * <pre>
   * Current ServicePerimeter configuration. Specifies sets of resources,
   * restricted services and access levels that determine perimeter
   * content and boundaries.
   * </pre>
   *
   * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
   *
   * @return The status.
   */
  public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig getStatus() {
    return status_ == null
        ? com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.getDefaultInstance()
        : status_;
  }
  /**
   *
   *
   * <pre>
   * Current ServicePerimeter configuration. Specifies sets of resources,
   * restricted services and access levels that determine perimeter
   * content and boundaries.
   * </pre>
   *
   * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
   */
  public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder
      getStatusOrBuilder() {
    return getStatus();
  }

  public static final int SPEC_FIELD_NUMBER = 8;
  private com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec_;
  /**
   *
   *
   * <pre>
   * Proposed (or dry run) ServicePerimeter configuration. This configuration
   * allows to specify and test ServicePerimeter configuration without enforcing
   * actual access restrictions. Only allowed to be set when the
   * "use_explicit_dry_run_spec" flag is set.
   * </pre>
   *
   * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
   *
   * @return Whether the spec field is set.
   */
  public boolean hasSpec() {
    return spec_ != null;
  }
  /**
   *
   *
   * <pre>
   * Proposed (or dry run) ServicePerimeter configuration. This configuration
   * allows to specify and test ServicePerimeter configuration without enforcing
   * actual access restrictions. Only allowed to be set when the
   * "use_explicit_dry_run_spec" flag is set.
   * </pre>
   *
   * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
   *
   * @return The spec.
   */
  public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig getSpec() {
    return spec_ == null
        ? com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.getDefaultInstance()
        : spec_;
  }
  /**
   *
   *
   * <pre>
   * Proposed (or dry run) ServicePerimeter configuration. This configuration
   * allows to specify and test ServicePerimeter configuration without enforcing
   * actual access restrictions. Only allowed to be set when the
   * "use_explicit_dry_run_spec" flag is set.
   * </pre>
   *
   * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
   */
  public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder
      getSpecOrBuilder() {
    return getSpec();
  }

  public static final int USE_EXPLICIT_DRY_RUN_SPEC_FIELD_NUMBER = 9;
  private boolean useExplicitDryRunSpec_;
  /**
   *
   *
   * <pre>
   * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly
   * exists  for all Service Perimeters, and that spec is identical to the
   * status for those Service Perimeters. When this flag is set, it inhibits the
   * generation of the implicit spec, thereby allowing the user to explicitly
   * provide a configuration ("spec") to use in a dry-run version of the Service
   * Perimeter. This allows the user to test changes to the enforced config
   * ("status") without actually enforcing them. This testing is done through
   * analyzing the differences between currently enforced and suggested
   * restrictions. use_explicit_dry_run_spec must bet set to True if any of the
   * fields in the spec are set to non-default values.
   * </pre>
   *
   * <code>bool use_explicit_dry_run_spec = 9;</code>
   *
   * @return The useExplicitDryRunSpec.
   */
  public boolean getUseExplicitDryRunSpec() {
    return useExplicitDryRunSpec_;
  }

  private byte memoizedIsInitialized = -1;

  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!getTitleBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, title_);
    }
    if (!getDescriptionBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, description_);
    }
    if (createTime_ != null) {
      output.writeMessage(4, getCreateTime());
    }
    if (updateTime_ != null) {
      output.writeMessage(5, getUpdateTime());
    }
    if (perimeterType_
        != com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType
            .PERIMETER_TYPE_REGULAR
            .getNumber()) {
      output.writeEnum(6, perimeterType_);
    }
    if (status_ != null) {
      output.writeMessage(7, getStatus());
    }
    if (spec_ != null) {
      output.writeMessage(8, getSpec());
    }
    if (useExplicitDryRunSpec_ != false) {
      output.writeBool(9, useExplicitDryRunSpec_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!getTitleBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, title_);
    }
    if (!getDescriptionBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, description_);
    }
    if (createTime_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(4, getCreateTime());
    }
    if (updateTime_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(5, getUpdateTime());
    }
    if (perimeterType_
        != com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType
            .PERIMETER_TYPE_REGULAR
            .getNumber()) {
      size += com.google.protobuf.CodedOutputStream.computeEnumSize(6, perimeterType_);
    }
    if (status_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(7, getStatus());
    }
    if (spec_ != null) {
      size += com.google.protobuf.CodedOutputStream.computeMessageSize(8, getSpec());
    }
    if (useExplicitDryRunSpec_ != false) {
      size += com.google.protobuf.CodedOutputStream.computeBoolSize(9, useExplicitDryRunSpec_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
      return true;
    }
    if (!(obj instanceof com.google.identity.accesscontextmanager.v1.ServicePerimeter)) {
      return super.equals(obj);
    }
    com.google.identity.accesscontextmanager.v1.ServicePerimeter other =
        (com.google.identity.accesscontextmanager.v1.ServicePerimeter) obj;

    if (!getName().equals(other.getName())) return false;
    if (!getTitle().equals(other.getTitle())) return false;
    if (!getDescription().equals(other.getDescription())) return false;
    if (hasCreateTime() != other.hasCreateTime()) return false;
    if (hasCreateTime()) {
      if (!getCreateTime().equals(other.getCreateTime())) return false;
    }
    if (hasUpdateTime() != other.hasUpdateTime()) return false;
    if (hasUpdateTime()) {
      if (!getUpdateTime().equals(other.getUpdateTime())) return false;
    }
    if (perimeterType_ != other.perimeterType_) return false;
    if (hasStatus() != other.hasStatus()) return false;
    if (hasStatus()) {
      if (!getStatus().equals(other.getStatus())) return false;
    }
    if (hasSpec() != other.hasSpec()) return false;
    if (hasSpec()) {
      if (!getSpec().equals(other.getSpec())) return false;
    }
    if (getUseExplicitDryRunSpec() != other.getUseExplicitDryRunSpec()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + TITLE_FIELD_NUMBER;
    hash = (53 * hash) + getTitle().hashCode();
    hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
    hash = (53 * hash) + getDescription().hashCode();
    if (hasCreateTime()) {
      hash = (37 * hash) + CREATE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getCreateTime().hashCode();
    }
    if (hasUpdateTime()) {
      hash = (37 * hash) + UPDATE_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getUpdateTime().hashCode();
    }
    hash = (37 * hash) + PERIMETER_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + perimeterType_;
    if (hasStatus()) {
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus().hashCode();
    }
    if (hasSpec()) {
      hash = (37 * hash) + SPEC_FIELD_NUMBER;
      hash = (53 * hash) + getSpec().hashCode();
    }
    hash = (37 * hash) + USE_EXPLICIT_DRY_RUN_SPEC_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(getUseExplicitDryRunSpec());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      java.nio.ByteBuffer data) throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      java.nio.ByteBuffer data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      byte[] data, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseDelimitedFrom(
      java.io.InputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseDelimitedFrom(
      java.io.InputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseDelimitedWithIOException(
        PARSER, input, extensionRegistry);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      com.google.protobuf.CodedInputStream input) throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(PARSER, input);
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3.parseWithIOException(
        PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() {
    return newBuilder();
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }

  public static Builder newBuilder(
      com.google.identity.accesscontextmanager.v1.ServicePerimeter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   *
   *
   * <pre>
   * `ServicePerimeter` describes a set of Google Cloud resources which can freely
   * import and export data amongst themselves, but not export outside of the
   * `ServicePerimeter`. If a request with a source within this `ServicePerimeter`
   * has a target outside of the `ServicePerimeter`, the request will be blocked.
   * Otherwise the request is allowed. There are two types of Service Perimeter -
   * Regular and Bridge. Regular Service Perimeters cannot overlap, a single
   * Google Cloud project can only belong to a single regular Service Perimeter.
   * Service Perimeter Bridges can contain only Google Cloud projects as members,
   * a single Google Cloud project may belong to multiple Service Perimeter
   * Bridges.
   * </pre>
   *
   * Protobuf type {@code google.identity.accesscontextmanager.v1.ServicePerimeter}
   */
  public static final class Builder extends com.google.protobuf.GeneratedMessageV3.Builder<Builder>
      implements
      // @@protoc_insertion_point(builder_implements:google.identity.accesscontextmanager.v1.ServicePerimeter)
      com.google.identity.accesscontextmanager.v1.ServicePerimeterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor getDescriptor() {
      return com.google.identity.accesscontextmanager.v1.ServicePerimeterProto
          .internal_static_google_identity_accesscontextmanager_v1_ServicePerimeter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.identity.accesscontextmanager.v1.ServicePerimeterProto
          .internal_static_google_identity_accesscontextmanager_v1_ServicePerimeter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.identity.accesscontextmanager.v1.ServicePerimeter.class,
              com.google.identity.accesscontextmanager.v1.ServicePerimeter.Builder.class);
    }

    // Construct using com.google.identity.accesscontextmanager.v1.ServicePerimeter.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }

    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders) {}
    }

    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      title_ = "";

      description_ = "";

      if (createTimeBuilder_ == null) {
        createTime_ = null;
      } else {
        createTime_ = null;
        createTimeBuilder_ = null;
      }
      if (updateTimeBuilder_ == null) {
        updateTime_ = null;
      } else {
        updateTime_ = null;
        updateTimeBuilder_ = null;
      }
      perimeterType_ = 0;

      if (statusBuilder_ == null) {
        status_ = null;
      } else {
        status_ = null;
        statusBuilder_ = null;
      }
      if (specBuilder_ == null) {
        spec_ = null;
      } else {
        spec_ = null;
        specBuilder_ = null;
      }
      useExplicitDryRunSpec_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor getDescriptorForType() {
      return com.google.identity.accesscontextmanager.v1.ServicePerimeterProto
          .internal_static_google_identity_accesscontextmanager_v1_ServicePerimeter_descriptor;
    }

    @java.lang.Override
    public com.google.identity.accesscontextmanager.v1.ServicePerimeter
        getDefaultInstanceForType() {
      return com.google.identity.accesscontextmanager.v1.ServicePerimeter.getDefaultInstance();
    }

    @java.lang.Override
    public com.google.identity.accesscontextmanager.v1.ServicePerimeter build() {
      com.google.identity.accesscontextmanager.v1.ServicePerimeter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.google.identity.accesscontextmanager.v1.ServicePerimeter buildPartial() {
      com.google.identity.accesscontextmanager.v1.ServicePerimeter result =
          new com.google.identity.accesscontextmanager.v1.ServicePerimeter(this);
      result.name_ = name_;
      result.title_ = title_;
      result.description_ = description_;
      if (createTimeBuilder_ == null) {
        result.createTime_ = createTime_;
      } else {
        result.createTime_ = createTimeBuilder_.build();
      }
      if (updateTimeBuilder_ == null) {
        result.updateTime_ = updateTime_;
      } else {
        result.updateTime_ = updateTimeBuilder_.build();
      }
      result.perimeterType_ = perimeterType_;
      if (statusBuilder_ == null) {
        result.status_ = status_;
      } else {
        result.status_ = statusBuilder_.build();
      }
      if (specBuilder_ == null) {
        result.spec_ = spec_;
      } else {
        result.spec_ = specBuilder_.build();
      }
      result.useExplicitDryRunSpec_ = useExplicitDryRunSpec_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }

    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.setField(field, value);
    }

    @java.lang.Override
    public Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }

    @java.lang.Override
    public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }

    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }

    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field, java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.google.identity.accesscontextmanager.v1.ServicePerimeter) {
        return mergeFrom((com.google.identity.accesscontextmanager.v1.ServicePerimeter) other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.google.identity.accesscontextmanager.v1.ServicePerimeter other) {
      if (other
          == com.google.identity.accesscontextmanager.v1.ServicePerimeter.getDefaultInstance())
        return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getTitle().isEmpty()) {
        title_ = other.title_;
        onChanged();
      }
      if (!other.getDescription().isEmpty()) {
        description_ = other.description_;
        onChanged();
      }
      if (other.hasCreateTime()) {
        mergeCreateTime(other.getCreateTime());
      }
      if (other.hasUpdateTime()) {
        mergeUpdateTime(other.getUpdateTime());
      }
      if (other.perimeterType_ != 0) {
        setPerimeterTypeValue(other.getPerimeterTypeValue());
      }
      if (other.hasStatus()) {
        mergeStatus(other.getStatus());
      }
      if (other.hasSpec()) {
        mergeSpec(other.getSpec());
      }
      if (other.getUseExplicitDryRunSpec() != false) {
        setUseExplicitDryRunSpec(other.getUseExplicitDryRunSpec());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.google.identity.accesscontextmanager.v1.ServicePerimeter parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage =
            (com.google.identity.accesscontextmanager.v1.ServicePerimeter) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     *
     *
     * <pre>
     * Required. Resource name for the ServicePerimeter.  The `short_name`
     * component must begin with a letter and only include alphanumeric and '_'.
     * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Resource name for the ServicePerimeter.  The `short_name`
     * component must begin with a letter and only include alphanumeric and '_'.
     * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Required. Resource name for the ServicePerimeter.  The `short_name`
     * component must begin with a letter and only include alphanumeric and '_'.
     * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      name_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Resource name for the ServicePerimeter.  The `short_name`
     * component must begin with a letter and only include alphanumeric and '_'.
     * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearName() {

      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Required. Resource name for the ServicePerimeter.  The `short_name`
     * component must begin with a letter and only include alphanumeric and '_'.
     * Format: `accessPolicies/{policy_id}/servicePerimeters/{short_name}`
     * </pre>
     *
     * <code>string name = 1;</code>
     *
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object title_ = "";
    /**
     *
     *
     * <pre>
     * Human readable title. Must be unique within the Policy.
     * </pre>
     *
     * <code>string title = 2;</code>
     *
     * @return The title.
     */
    public java.lang.String getTitle() {
      java.lang.Object ref = title_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        title_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Human readable title. Must be unique within the Policy.
     * </pre>
     *
     * <code>string title = 2;</code>
     *
     * @return The bytes for title.
     */
    public com.google.protobuf.ByteString getTitleBytes() {
      java.lang.Object ref = title_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        title_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Human readable title. Must be unique within the Policy.
     * </pre>
     *
     * <code>string title = 2;</code>
     *
     * @param value The title to set.
     * @return This builder for chaining.
     */
    public Builder setTitle(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      title_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Human readable title. Must be unique within the Policy.
     * </pre>
     *
     * <code>string title = 2;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearTitle() {

      title_ = getDefaultInstance().getTitle();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Human readable title. Must be unique within the Policy.
     * </pre>
     *
     * <code>string title = 2;</code>
     *
     * @param value The bytes for title to set.
     * @return This builder for chaining.
     */
    public Builder setTitleBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      title_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object description_ = "";
    /**
     *
     *
     * <pre>
     * Description of the `ServicePerimeter` and its use. Does not affect
     * behavior.
     * </pre>
     *
     * <code>string description = 3;</code>
     *
     * @return The description.
     */
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs = (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Description of the `ServicePerimeter` and its use. Does not affect
     * behavior.
     * </pre>
     *
     * <code>string description = 3;</code>
     *
     * @return The bytes for description.
     */
    public com.google.protobuf.ByteString getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8((java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     *
     *
     * <pre>
     * Description of the `ServicePerimeter` and its use. Does not affect
     * behavior.
     * </pre>
     *
     * <code>string description = 3;</code>
     *
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(java.lang.String value) {
      if (value == null) {
        throw new NullPointerException();
      }

      description_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Description of the `ServicePerimeter` and its use. Does not affect
     * behavior.
     * </pre>
     *
     * <code>string description = 3;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearDescription() {

      description_ = getDefaultInstance().getDescription();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Description of the `ServicePerimeter` and its use. Does not affect
     * behavior.
     * </pre>
     *
     * <code>string description = 3;</code>
     *
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
        throw new NullPointerException();
      }
      checkByteStringIsUtf8(value);

      description_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.Timestamp createTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        createTimeBuilder_;
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     *
     * @return Whether the createTime field is set.
     */
    public boolean hasCreateTime() {
      return createTimeBuilder_ != null || createTime_ != null;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     *
     * @return The createTime.
     */
    public com.google.protobuf.Timestamp getCreateTime() {
      if (createTimeBuilder_ == null) {
        return createTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : createTime_;
      } else {
        return createTimeBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     */
    public Builder setCreateTime(com.google.protobuf.Timestamp value) {
      if (createTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        createTime_ = value;
        onChanged();
      } else {
        createTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     */
    public Builder setCreateTime(com.google.protobuf.Timestamp.Builder builderForValue) {
      if (createTimeBuilder_ == null) {
        createTime_ = builderForValue.build();
        onChanged();
      } else {
        createTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     */
    public Builder mergeCreateTime(com.google.protobuf.Timestamp value) {
      if (createTimeBuilder_ == null) {
        if (createTime_ != null) {
          createTime_ =
              com.google.protobuf.Timestamp.newBuilder(createTime_).mergeFrom(value).buildPartial();
        } else {
          createTime_ = value;
        }
        onChanged();
      } else {
        createTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     */
    public Builder clearCreateTime() {
      if (createTimeBuilder_ == null) {
        createTime_ = null;
        onChanged();
      } else {
        createTime_ = null;
        createTimeBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     */
    public com.google.protobuf.Timestamp.Builder getCreateTimeBuilder() {

      onChanged();
      return getCreateTimeFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getCreateTimeOrBuilder() {
      if (createTimeBuilder_ != null) {
        return createTimeBuilder_.getMessageOrBuilder();
      } else {
        return createTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : createTime_;
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was created in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp create_time = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        getCreateTimeFieldBuilder() {
      if (createTimeBuilder_ == null) {
        createTimeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Timestamp,
                com.google.protobuf.Timestamp.Builder,
                com.google.protobuf.TimestampOrBuilder>(
                getCreateTime(), getParentForChildren(), isClean());
        createTime_ = null;
      }
      return createTimeBuilder_;
    }

    private com.google.protobuf.Timestamp updateTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        updateTimeBuilder_;
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     *
     * @return Whether the updateTime field is set.
     */
    public boolean hasUpdateTime() {
      return updateTimeBuilder_ != null || updateTime_ != null;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     *
     * @return The updateTime.
     */
    public com.google.protobuf.Timestamp getUpdateTime() {
      if (updateTimeBuilder_ == null) {
        return updateTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : updateTime_;
      } else {
        return updateTimeBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     */
    public Builder setUpdateTime(com.google.protobuf.Timestamp value) {
      if (updateTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        updateTime_ = value;
        onChanged();
      } else {
        updateTimeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     */
    public Builder setUpdateTime(com.google.protobuf.Timestamp.Builder builderForValue) {
      if (updateTimeBuilder_ == null) {
        updateTime_ = builderForValue.build();
        onChanged();
      } else {
        updateTimeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     */
    public Builder mergeUpdateTime(com.google.protobuf.Timestamp value) {
      if (updateTimeBuilder_ == null) {
        if (updateTime_ != null) {
          updateTime_ =
              com.google.protobuf.Timestamp.newBuilder(updateTime_).mergeFrom(value).buildPartial();
        } else {
          updateTime_ = value;
        }
        onChanged();
      } else {
        updateTimeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     */
    public Builder clearUpdateTime() {
      if (updateTimeBuilder_ == null) {
        updateTime_ = null;
        onChanged();
      } else {
        updateTime_ = null;
        updateTimeBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     */
    public com.google.protobuf.Timestamp.Builder getUpdateTimeBuilder() {

      onChanged();
      return getUpdateTimeFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     */
    public com.google.protobuf.TimestampOrBuilder getUpdateTimeOrBuilder() {
      if (updateTimeBuilder_ != null) {
        return updateTimeBuilder_.getMessageOrBuilder();
      } else {
        return updateTime_ == null
            ? com.google.protobuf.Timestamp.getDefaultInstance()
            : updateTime_;
      }
    }
    /**
     *
     *
     * <pre>
     * Output only. Time the `ServicePerimeter` was updated in UTC.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp update_time = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp,
            com.google.protobuf.Timestamp.Builder,
            com.google.protobuf.TimestampOrBuilder>
        getUpdateTimeFieldBuilder() {
      if (updateTimeBuilder_ == null) {
        updateTimeBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.protobuf.Timestamp,
                com.google.protobuf.Timestamp.Builder,
                com.google.protobuf.TimestampOrBuilder>(
                getUpdateTime(), getParentForChildren(), isClean());
        updateTime_ = null;
      }
      return updateTimeBuilder_;
    }

    private int perimeterType_ = 0;
    /**
     *
     *
     * <pre>
     * Perimeter type indicator. A single project is
     * allowed to be a member of single regular perimeter, but multiple service
     * perimeter bridges. A project cannot be a included in a perimeter bridge
     * without being included in regular perimeter. For perimeter bridges,
     * the restricted service list as well as access level lists must be
     * empty.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
     * </code>
     *
     * @return The enum numeric value on the wire for perimeterType.
     */
    public int getPerimeterTypeValue() {
      return perimeterType_;
    }
    /**
     *
     *
     * <pre>
     * Perimeter type indicator. A single project is
     * allowed to be a member of single regular perimeter, but multiple service
     * perimeter bridges. A project cannot be a included in a perimeter bridge
     * without being included in regular perimeter. For perimeter bridges,
     * the restricted service list as well as access level lists must be
     * empty.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
     * </code>
     *
     * @param value The enum numeric value on the wire for perimeterType to set.
     * @return This builder for chaining.
     */
    public Builder setPerimeterTypeValue(int value) {
      perimeterType_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Perimeter type indicator. A single project is
     * allowed to be a member of single regular perimeter, but multiple service
     * perimeter bridges. A project cannot be a included in a perimeter bridge
     * without being included in regular perimeter. For perimeter bridges,
     * the restricted service list as well as access level lists must be
     * empty.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
     * </code>
     *
     * @return The perimeterType.
     */
    public com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType
        getPerimeterType() {
      @SuppressWarnings("deprecation")
      com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType result =
          com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType.valueOf(
              perimeterType_);
      return result == null
          ? com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType.UNRECOGNIZED
          : result;
    }
    /**
     *
     *
     * <pre>
     * Perimeter type indicator. A single project is
     * allowed to be a member of single regular perimeter, but multiple service
     * perimeter bridges. A project cannot be a included in a perimeter bridge
     * without being included in regular perimeter. For perimeter bridges,
     * the restricted service list as well as access level lists must be
     * empty.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
     * </code>
     *
     * @param value The perimeterType to set.
     * @return This builder for chaining.
     */
    public Builder setPerimeterType(
        com.google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType value) {
      if (value == null) {
        throw new NullPointerException();
      }

      perimeterType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Perimeter type indicator. A single project is
     * allowed to be a member of single regular perimeter, but multiple service
     * perimeter bridges. A project cannot be a included in a perimeter bridge
     * without being included in regular perimeter. For perimeter bridges,
     * the restricted service list as well as access level lists must be
     * empty.
     * </pre>
     *
     * <code>
     * .google.identity.accesscontextmanager.v1.ServicePerimeter.PerimeterType perimeter_type = 6;
     * </code>
     *
     * @return This builder for chaining.
     */
    public Builder clearPerimeterType() {

      perimeterType_ = 0;
      onChanged();
      return this;
    }

    private com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder>
        statusBuilder_;
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     *
     * @return Whether the status field is set.
     */
    public boolean hasStatus() {
      return statusBuilder_ != null || status_ != null;
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     *
     * @return The status.
     */
    public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig getStatus() {
      if (statusBuilder_ == null) {
        return status_ == null
            ? com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig
                .getDefaultInstance()
            : status_;
      } else {
        return statusBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     */
    public Builder setStatus(
        com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig value) {
      if (statusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        status_ = value;
        onChanged();
      } else {
        statusBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     */
    public Builder setStatus(
        com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder
            builderForValue) {
      if (statusBuilder_ == null) {
        status_ = builderForValue.build();
        onChanged();
      } else {
        statusBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     */
    public Builder mergeStatus(
        com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig value) {
      if (statusBuilder_ == null) {
        if (status_ != null) {
          status_ =
              com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.newBuilder(status_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          status_ = value;
        }
        onChanged();
      } else {
        statusBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     */
    public Builder clearStatus() {
      if (statusBuilder_ == null) {
        status_ = null;
        onChanged();
      } else {
        status_ = null;
        statusBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     */
    public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder
        getStatusBuilder() {

      onChanged();
      return getStatusFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     */
    public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder
        getStatusOrBuilder() {
      if (statusBuilder_ != null) {
        return statusBuilder_.getMessageOrBuilder();
      } else {
        return status_ == null
            ? com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig
                .getDefaultInstance()
            : status_;
      }
    }
    /**
     *
     *
     * <pre>
     * Current ServicePerimeter configuration. Specifies sets of resources,
     * restricted services and access levels that determine perimeter
     * content and boundaries.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig status = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder>
        getStatusFieldBuilder() {
      if (statusBuilder_ == null) {
        statusBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig,
                com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder,
                com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder>(
                getStatus(), getParentForChildren(), isClean());
        status_ = null;
      }
      return statusBuilder_;
    }

    private com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec_;
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder>
        specBuilder_;
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     *
     * @return Whether the spec field is set.
     */
    public boolean hasSpec() {
      return specBuilder_ != null || spec_ != null;
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     *
     * @return The spec.
     */
    public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig getSpec() {
      if (specBuilder_ == null) {
        return spec_ == null
            ? com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig
                .getDefaultInstance()
            : spec_;
      } else {
        return specBuilder_.getMessage();
      }
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     */
    public Builder setSpec(
        com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig value) {
      if (specBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        spec_ = value;
        onChanged();
      } else {
        specBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     */
    public Builder setSpec(
        com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder
            builderForValue) {
      if (specBuilder_ == null) {
        spec_ = builderForValue.build();
        onChanged();
      } else {
        specBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     */
    public Builder mergeSpec(
        com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig value) {
      if (specBuilder_ == null) {
        if (spec_ != null) {
          spec_ =
              com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.newBuilder(spec_)
                  .mergeFrom(value)
                  .buildPartial();
        } else {
          spec_ = value;
        }
        onChanged();
      } else {
        specBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     */
    public Builder clearSpec() {
      if (specBuilder_ == null) {
        spec_ = null;
        onChanged();
      } else {
        spec_ = null;
        specBuilder_ = null;
      }

      return this;
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     */
    public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder
        getSpecBuilder() {

      onChanged();
      return getSpecFieldBuilder().getBuilder();
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     */
    public com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder
        getSpecOrBuilder() {
      if (specBuilder_ != null) {
        return specBuilder_.getMessageOrBuilder();
      } else {
        return spec_ == null
            ? com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig
                .getDefaultInstance()
            : spec_;
      }
    }
    /**
     *
     *
     * <pre>
     * Proposed (or dry run) ServicePerimeter configuration. This configuration
     * allows to specify and test ServicePerimeter configuration without enforcing
     * actual access restrictions. Only allowed to be set when the
     * "use_explicit_dry_run_spec" flag is set.
     * </pre>
     *
     * <code>.google.identity.accesscontextmanager.v1.ServicePerimeterConfig spec = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder,
            com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder>
        getSpecFieldBuilder() {
      if (specBuilder_ == null) {
        specBuilder_ =
            new com.google.protobuf.SingleFieldBuilderV3<
                com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig,
                com.google.identity.accesscontextmanager.v1.ServicePerimeterConfig.Builder,
                com.google.identity.accesscontextmanager.v1.ServicePerimeterConfigOrBuilder>(
                getSpec(), getParentForChildren(), isClean());
        spec_ = null;
      }
      return specBuilder_;
    }

    private boolean useExplicitDryRunSpec_;
    /**
     *
     *
     * <pre>
     * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly
     * exists  for all Service Perimeters, and that spec is identical to the
     * status for those Service Perimeters. When this flag is set, it inhibits the
     * generation of the implicit spec, thereby allowing the user to explicitly
     * provide a configuration ("spec") to use in a dry-run version of the Service
     * Perimeter. This allows the user to test changes to the enforced config
     * ("status") without actually enforcing them. This testing is done through
     * analyzing the differences between currently enforced and suggested
     * restrictions. use_explicit_dry_run_spec must bet set to True if any of the
     * fields in the spec are set to non-default values.
     * </pre>
     *
     * <code>bool use_explicit_dry_run_spec = 9;</code>
     *
     * @return The useExplicitDryRunSpec.
     */
    public boolean getUseExplicitDryRunSpec() {
      return useExplicitDryRunSpec_;
    }
    /**
     *
     *
     * <pre>
     * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly
     * exists  for all Service Perimeters, and that spec is identical to the
     * status for those Service Perimeters. When this flag is set, it inhibits the
     * generation of the implicit spec, thereby allowing the user to explicitly
     * provide a configuration ("spec") to use in a dry-run version of the Service
     * Perimeter. This allows the user to test changes to the enforced config
     * ("status") without actually enforcing them. This testing is done through
     * analyzing the differences between currently enforced and suggested
     * restrictions. use_explicit_dry_run_spec must bet set to True if any of the
     * fields in the spec are set to non-default values.
     * </pre>
     *
     * <code>bool use_explicit_dry_run_spec = 9;</code>
     *
     * @param value The useExplicitDryRunSpec to set.
     * @return This builder for chaining.
     */
    public Builder setUseExplicitDryRunSpec(boolean value) {

      useExplicitDryRunSpec_ = value;
      onChanged();
      return this;
    }
    /**
     *
     *
     * <pre>
     * Use explicit dry run spec flag. Ordinarily, a dry-run spec implicitly
     * exists  for all Service Perimeters, and that spec is identical to the
     * status for those Service Perimeters. When this flag is set, it inhibits the
     * generation of the implicit spec, thereby allowing the user to explicitly
     * provide a configuration ("spec") to use in a dry-run version of the Service
     * Perimeter. This allows the user to test changes to the enforced config
     * ("status") without actually enforcing them. This testing is done through
     * analyzing the differences between currently enforced and suggested
     * restrictions. use_explicit_dry_run_spec must bet set to True if any of the
     * fields in the spec are set to non-default values.
     * </pre>
     *
     * <code>bool use_explicit_dry_run_spec = 9;</code>
     *
     * @return This builder for chaining.
     */
    public Builder clearUseExplicitDryRunSpec() {

      useExplicitDryRunSpec_ = false;
      onChanged();
      return this;
    }

    @java.lang.Override
    public final Builder setUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }

    // @@protoc_insertion_point(builder_scope:google.identity.accesscontextmanager.v1.ServicePerimeter)
  }

  // @@protoc_insertion_point(class_scope:google.identity.accesscontextmanager.v1.ServicePerimeter)
  private static final com.google.identity.accesscontextmanager.v1.ServicePerimeter
      DEFAULT_INSTANCE;

  static {
    DEFAULT_INSTANCE = new com.google.identity.accesscontextmanager.v1.ServicePerimeter();
  }

  public static com.google.identity.accesscontextmanager.v1.ServicePerimeter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ServicePerimeter> PARSER =
      new com.google.protobuf.AbstractParser<ServicePerimeter>() {
        @java.lang.Override
        public ServicePerimeter parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new ServicePerimeter(input, extensionRegistry);
        }
      };

  public static com.google.protobuf.Parser<ServicePerimeter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ServicePerimeter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.identity.accesscontextmanager.v1.ServicePerimeter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }
}
